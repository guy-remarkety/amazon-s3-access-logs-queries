AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    Stack that deploys a bucket which you can use as a target for your
    Amazon S3 access logs (use the prefix 'new/'). An event
    notification is configured so that new objects created will fire an
    AWS Lambda function that moves the objects to prefixes (under
    'partitioned/') that adhere to the Apache Hive partitioning format.
    This way the data is easier to consume for big data tools (as Amazon
    Athena and AWS Glue).

Parameters:
  ResourcePrefix: 
    Type: String
    Default: 'myapp'
    ConstraintDescription: '[a-z0-9]+/'
    MinLength: 1
    MaxLength: 20
    Description: >
        Prefix that is used for the created resources (20 chars, a-z and 0-9 only)
  NewKeyPrefix: 
    Type: String
    Default: 'new/'
    ConstraintDescription: '[A-Za-z0-9\-]+/'
    Description: >
        Prefix of new access log files that are written by Amazon S3.
        Including the trailing slash.
  PartitionedKeyPrefix:
    Type: String
    Default: 'partitioned/'
    ConstraintDescription: '[A-Za-z0-9\-]+/'
    Description: >
        Prefix of raw access log files that are moved to the Apache Hive
        like style. Including the trailing slash.
  ParquetKeyPrefix: 
    Type: String
    Default: 'partitioned-parquet/'
    ConstraintDescription: '[A-Za-z0-9\-]+/'
    Description: >
        Prefix of parquet files that are created in Apache Hive
        like style by the CTAS query. Including the trailing slash.
Resources:
    TransformPartFn:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: functions/
            Handler: transformPartition.handler
            Runtime: nodejs12.x
            Timeout: 900
            Policies:
            - Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - athena:StartQueryExecution
                    - athena:GetQueryExecution
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetBucketLocation
                  Resource: !Sub "arn:aws:s3:::${ResourcePrefix}-${AWS::AccountId}-s3-access-logs"
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                  Resource: !Sub "arn:aws:s3:::${ResourcePrefix}-${AWS::AccountId}-s3-access-logs/*"
                - Effect: Allow
                  Action:
                    - glue:CreatePartition
                    - glue:GetDatabase
                    - glue:GetTable
                    - glue:BatchCreatePartition
                    - glue:GetPartition
                    - glue:GetPartitions
                    - glue:CreateTable
                    - glue:DeleteTable
                    - glue:DeletePartition
                  Resource: '*'
            Environment:
                Variables:
                    SOURCE_TABLE: !Ref PartitionedTable
                    TARGET_TABLE: !Ref PartitionedParquetTable
                    DATABASE: !Ref S3LogsDatabase
                    ATHENA_QUERY_RESULTS_LOCATION: !Sub "s3://${ResourcePrefix}-${AWS::AccountId}-s3-access-logs/athena-query-results"
            Events:
              HourlyEvt:
                Type: Schedule
                Properties:
                  Schedule: cron(1 * * * ? *)
    CreatePartFn:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: functions/
            Handler: createPartitions.handler
            Runtime: nodejs12.x
            Timeout: 5
            Policies:
            - Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - athena:StartQueryExecution
                    - athena:GetQueryExecution
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetBucketLocation
                  Resource: !Sub "arn:aws:s3:::${ResourcePrefix}-${AWS::AccountId}-s3-access-logs"
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource: !Sub "arn:aws:s3:::${ResourcePrefix}-${AWS::AccountId}-s3-access-logs/*"
                - Effect: Allow
                  Action:
                    - glue:CreatePartition
                    - glue:GetDatabase
                    - glue:GetTable
                    - glue:BatchCreatePartition
                  Resource: '*'
            Environment:
                Variables:
                    TABLE: !Ref PartitionedTable
                    DATABASE: !Ref S3LogsDatabase
                    ATHENA_QUERY_RESULTS_LOCATION: !Sub "s3://${ResourcePrefix}-${AWS::AccountId}-s3-access-logs/athena-query-results"
            Events:
              HourlyEvt:
                Type: Schedule
                Properties:
                  Schedule: cron(55 * * * ? *)
    MoveNewAccessLogsFn:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: functions/
            Handler: moveAccessLogs.handler
            Runtime: nodejs12.x
            Timeout: 30
            Policies:
            - Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:DeleteObject
                  Resource: !Sub "arn:aws:s3:::${ResourcePrefix}-${AWS::AccountId}-s3-access-logs/${NewKeyPrefix}*"
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource: !Sub "arn:aws:s3:::${ResourcePrefix}-${AWS::AccountId}-s3-access-logs/${PartitionedKeyPrefix}*"
            Environment:
                Variables:
                    TARGET_KEY_PREFIX: !Ref PartitionedKeyPrefix
            Events:
                AccessLogsUploadedEvent:
                    Type: S3
                    Properties:
                        Bucket: !Ref S3AccessLogsBucket
                        Events: s3:ObjectCreated:*
                        Filter:
                            S3Key:
                                Rules:
                                - Name: prefix
                                  Value: !Ref NewKeyPrefix
    S3AccessLogsBucket :
        Type: "AWS::S3::Bucket"
        Description: "Bucket for Amazon S3 access logs"
        Properties:
            BucketName: !Sub "${ResourcePrefix}-${AWS::AccountId}-s3-access-logs"
        Rules:
          - ExpirationInDays: 180

# Glue Resources
# - Database
# - Partitioned Raw Table
# - Partitioned Parquet Table
# - Combined view of both tables

    S3LogsDatabase:
        Type: AWS::Glue::Database
        Properties:
          CatalogId: !Ref AWS::AccountId
          DatabaseInput:
            Name: !Sub "${ResourcePrefix}_s3_access_logs_db"
    PartitionedTable:
      Type: AWS::Glue::Table
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseName: !Ref S3LogsDatabase
        TableInput:
          Name: 'partitioned'
          Description: 'Raw logs delivered by Amazon S3 partitioned'
          TableType: EXTERNAL_TABLE
          Parameters: { "skip.header.line.count": "0" }
          PartitionKeys:
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          - Name: hour
            Type: string
          StorageDescriptor:
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            Columns:
            - Name: bucketowner
              Type: string
            - Name: bucket
              Type: string
            - Name: requestdatetime
              Type: string
            - Name: remoteip
              Type: string
            - Name: requester
              Type: string
            - Name: requestid
              Type: string
            - Name: operation
              Type: string
            - Name: key
              Type: string
            - Name: requesturi_operation
              Type: string
            - Name: requesturi_key
              Type: string
            - Name: requesturi_httpprotoversion
              Type: string
            - Name: httpstatus
              Type: string
            - Name: errorcode
              Type: string
            - Name: bytessent
              Type: bigint
            - Name: objectsize
              Type: bigint
            - Name: totaltime
              Type: string
            - Name: turnaroundtime
              Type: string
            - Name: referrer
              Type: string
            - Name: useragent
              Type: string
            - Name: versionid
              Type: string
            - Name: hostid
              Type: string
            - Name: sigv
              Type: string
            - Name: ciphersuite
              Type: string
            - Name: authtype
              Type: string
            - Name: endpoint
              Type: string
            - Name: tlsversion
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub "s3://${ResourcePrefix}-${AWS::AccountId}-s3-access-logs/${PartitionedKeyPrefix}"
            SerdeInfo:
              Parameters:
                input.regex: '([^ ]*) ([^ ]*) \[(.*?)\] ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) \"([^ ]*) ([^ ]*) (- |[^ ]*)\" (-|[0-9]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ("[^"]*") ([^ ]*)(?: ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*))?.*$'
              SerializationLibrary: org.apache.hadoop.hive.serde2.RegexSerDe
    PartitionedParquetTable:
      Type: AWS::Glue::Table
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseName: !Ref S3LogsDatabase
        TableInput:
          Name: 'partitioned_parquet'
          Description: 'Parquet format access logs as transformed from raw version'
          TableType: EXTERNAL_TABLE
          Parameters: { 'has_encrypted_data': 'false', 'parquet.compression': 'SNAPPY' }
          PartitionKeys:
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          - Name: hour
            Type: string
          StorageDescriptor:
            OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
            Columns:
              - Name: bucketowner
                Type: string
              - Name: bucket
                Type: string
              - Name: requestdatetime
                Type: string
              - Name: remoteip
                Type: string
              - Name: requester
                Type: string
              - Name: requestid
                Type: string
              - Name: operation
                Type: string
              - Name: key
                Type: string
              - Name: requesturi_operation
                Type: string
              - Name: requesturi_key
                Type: string
              - Name: requesturi_httpprotoversion
                Type: string
              - Name: httpstatus
                Type: string
              - Name: errorcode
                Type: string
              - Name: bytessent
                Type: bigint
              - Name: objectsize
                Type: bigint
              - Name: totaltime
                Type: string
              - Name: turnaroundtime
                Type: string
              - Name: referrer
                Type: string
              - Name: useragent
                Type: string
              - Name: versionid
                Type: string
              - Name: hostid
                Type: string
              - Name: sigv
                Type: string
              - Name: ciphersuite
                Type: string
              - Name: authtype
                Type: string
              - Name: endpoint
                Type: string
              - Name: tlsversion
                Type: string
            InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
            Location: !Sub "s3://${ResourcePrefix}-${AWS::AccountId}-s3-access-logs/${ParquetKeyPrefix}"
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
    CombinedView:
      Type: AWS::Glue::Table
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseName: !Ref S3LogsDatabase
        TableInput:
          Name: 'combined'
          Description: 'combined view over raw and parquet tables'
          TableType: VIRTUAL_VIEW
          Parameters: { 'presto_view': 'true' }
          PartitionKeys: []
          StorageDescriptor:
            Columns:
            - Name: bucketowner
              Type: string
            - Name: bucket
              Type: string
            - Name: requestdatetime
              Type: string
            - Name: remoteip
              Type: string
            - Name: requester
              Type: string
            - Name: requestid
              Type: string
            - Name: operation
              Type: string
            - Name: key
              Type: string
            - Name: requesturi_operation
              Type: string
            - Name: requesturi_key
              Type: string
            - Name: requesturi_httpprotoversion
              Type: string
            - Name: httpstatus
              Type: string
            - Name: errorcode
              Type: string
            - Name: bytessent
              Type: bigint
            - Name: objectsize
              Type: bigint
            - Name: totaltime
              Type: string
            - Name: turnaroundtime
              Type: string
            - Name: referrer
              Type: string
            - Name: useragent
              Type: string
            - Name: versionid
              Type: string
            - Name: hostid
              Type: string
            - Name: sigv
              Type: string
            - Name: ciphersuite
              Type: string
            - Name: authtype
              Type: string
            - Name: endpoint
              Type: string
            - Name: tlsversion
              Type: string
            - Name: year
              Type: string
            - Name: month
              Type: string
            - Name: day
              Type: string
            - Name: hour
              Type: string
            - Name: file
              Type: string
            SerdeInfo: {}
          ViewOriginalText:
            Fn::Join:
            - ''
            - - '/* Presto View: '
              - Fn::Base64:
                  Fn::Sub:
                  - |- 
                    {
                      "originalSql": "SELECT *, \"$path\" as file FROM ${database}.${partitioned_table} WHERE (concat(year, month, day, hour) >= date_format(date_trunc('hour', ((current_timestamp - INTERVAL  '15' MINUTE) - INTERVAL  '1' HOUR)), '%Y%m%d%H')) UNION ALL SELECT *, \"$path\" as file FROM ${database}.${partitioned_parquet_table} WHERE (concat(year, month, day, hour) < date_format(date_trunc('hour', ((current_timestamp - INTERVAL  '15' MINUTE) - INTERVAL  '1' HOUR)), '%Y%m%d%H'))",
                      "catalog": "awsdatacatalog",
                      "schema": "${database}",
                      "columns": [
                        {"name": "bucketowner", "type": "varchar"},
                        {"name": "bucket", "type": "varchar"},
                        {"name": "requestdatetime", "type": "varchar"},
                        {"name": "remoteip", "type": "varchar"},
                        {"name": "requester", "type": "varchar"},
                        {"name": "requestid", "type": "varchar"},
                        {"name": "operation", "type": "varchar"},
                        {"name": "key", "type": "varchar"},
                        {"name": "requesturi_operation", "type": "varchar"},
                        {"name": "requesturi_key", "type": "varchar"},
                        {"name": "requesturi_httpprotoversion", "type": "varchar"},
                        {"name": "httpstatus", "type": "varchar"},
                        {"name": "errorcode", "type": "varchar"},
                        {"name": "bytessent", "type": "bigint"},
                        {"name": "objectsize", "type": "bigint"},
                        {"name": "totaltime", "type": "varchar"},
                        {"name": "turnaroundtime", "type": "varchar"},
                        {"name": "referrer", "type": "varchar"},
                        {"name": "useragent", "type": "varchar"},
                        {"name": "versionid", "type": "varchar"},
                        {"name": "hostid", "type": "varchar"},
                        {"name": "sigv", "type": "varchar"},
                        {"name": "ciphersuite", "type": "varchar"},
                        {"name": "authtype", "type": "varchar"},
                        {"name": "endpoint", "type": "varchar"},
                        {"name": "tlsversion", "type": "varchar"},
                        {"name": "year", "type": "varchar"},
                        {"name": "month", "type": "varchar"},
                        {"name": "day", "type": "varchar"},
                        {"name": "hour", "type": "varchar"},
                        {"name": "file", "type": "varchar"}
                      ]
                    }
                  - { database: !Ref S3LogsDatabase,
                    partitioned_table: !Ref PartitionedTable,
                    partitioned_parquet_table: !Ref PartitionedParquetTable }
              - ' */'